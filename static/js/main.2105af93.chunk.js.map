{"version":3,"sources":["Components/AppItems.js","Nav.js","Components/PostForm.js","App.js","serviceWorker.js","index.js"],"names":["App","props","state","this","List","map","word","key","length","Component","Nav","className","App1","onsumitForm","e","setState","target","name","value","submitHandler","preventDefault","console","log","axios","post","then","response","data","error","StartsWith","EndsWith","Include","WORDMAXLENGTH","WORDMINLENGTH","onSubmit","type","placeholder","onChange","min","max","AppItems","id","PostForm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSAgCeA,E,YA9BX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GAFE,E,sEAKf,OACI,6BACA,+BACI,4BACA,qCACA,6CACA,6CAEA,+BAEKC,KAAKF,MAAMG,KAAKC,KAAI,SAAAC,GAAI,OACrB,wBAAIC,IAAKD,GACT,4BAAKA,GACL,4BAAKA,EAAKE,QACV,4BAAKF,EAAK,e,GApBhBG,aCuBHC,G,kBArBX,WAAYT,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GAFE,E,sEAKf,OACI,6BACI,6BACI,yBAAKS,UAAU,SACX,gDAEL,4BACE,wBAAIA,UAAU,YAAYR,KAAKF,MAAMG,KAAKI,QAC1C,8C,GAdHC,c,iBC4DHG,E,YAzDX,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KAWVY,YAAc,SAACC,GACX,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAMH,EAAEE,OAAOE,SAbzB,EAenBC,cAAgB,SAAAL,GACZA,EAAEM,iBACFC,QAAQC,IAAI,EAAKpB,OACjBqB,IAAMC,KAAK,+GAAgH,EAAKtB,OAC/HuB,MAAK,SAAAC,GACFL,QAAQC,IAAII,GACZ,EAAKX,SAAS,CAACX,KAAMsB,EAASC,UAEjCF,MAAK,SAAAG,GACFP,QAAQC,IAAIM,OAtBhB,EAAK1B,MAAQ,CACL2B,WAAW,GACXC,SAAS,GACTC,QAAQ,GACRC,cAAc,GACdC,cAAc,EACd7B,KAAK,IARE,E,sEA2BT,IAAD,EAEFD,KAAKD,MADJ2B,EADC,EACDA,WAAYC,EADX,EACWA,SAAUC,EADrB,EACqBA,QAASC,EAD9B,EAC8BA,cAAeC,EAD7C,EAC6CA,cACtD7B,EAFS,EAETA,KACI,OACI,6BACI,kBAAC,EAAD,CAAKA,KAAMA,IACH,0BAAM8B,SAAU/B,KAAKgB,eACrB,2BAAOgB,KAAK,OAAOlB,KAAK,aACxBmB,YAAY,aACZC,SAAUlC,KAAKU,YAAaK,MAAOW,IAAa,6BAC/C,2BAAOM,KAAK,OAAOlB,KAAK,UACzBmB,YAAY,UACZC,SAAUlC,KAAKU,YAAaK,MAAOa,IAAU,6BAC7C,2BAAOI,KAAK,OAAOlB,KAAK,WACxBmB,YAAY,WACZC,SAAUlC,KAAKU,YAAaK,MAAOY,IAAW,6BAC9C,2BAAOK,KAAK,SAASlB,KAAK,gBAC1BoB,SAAUlC,KAAKU,YAAaK,MAAOc,EACnCM,IAAI,IAAIC,IAAI,OAAM,6BAClB,2BAAOJ,KAAK,SAASlB,KAAK,gBAC1BoB,SAAUlC,KAAKU,YAAaK,MAAOe,EACnCK,IAAI,IAAIC,IAAI,MAAK,6BACjB,4BAAQJ,KAAK,UAAb,WAER,kBAACK,EAAD,CAAUpC,KAAMA,EAAMG,IAAKH,EAAKqC,U,GApD7BhC,a,MCSJT,MARf,WACE,OACE,yBAAKW,UAAU,OACX,kBAAC+B,EAAD,QCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.2105af93.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return ( \r\n            <div>\r\n            <table>\r\n                <tr>\r\n                <th>Words</th>\r\n                <th>Groups length</th>\r\n                <th>Words Group </th>\r\n                </tr>\r\n                <tbody>\r\n                   {\r\n                     this.props.List.map(word => (\r\n                        <tr key={word}>\r\n                        <td>{word}</td>\r\n                        <td>{word.length}</td>\r\n                        <td>{word[0]}</td>\r\n                        </tr> \r\n                     ))  \r\n                   }\r\n                </tbody>\r\n            </table>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default App;","import React, { Component } from 'react';\r\nimport \"./Components/Nav.css\"\r\nclass Nav extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return (\r\n            <div>\r\n                <nav>\r\n                    <div className=\"Title\">\r\n                        <h4>Word Finder App</h4>\r\n                    </div>\r\n                   <ul>\r\n                     <li className=\"App-list\">{this.props.List.length}</li>\r\n                     <li>Results</li>\r\n                </ul>\r\n                </nav>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Nav;","import React, { Component } from 'react';\r\nimport AppItems from \"./AppItems\"\r\nimport Nav from \"../Nav\"\r\nimport axios from \"axios\"\r\nclass App1 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n                StartsWith:\"\",\r\n                EndsWith:\"\",\r\n                Include:\"\",\r\n                WORDMAXLENGTH:10,\r\n                WORDMINLENGTH:2,\r\n                List:[]\r\n         }\r\n    }\r\n    \r\n    onsumitForm = (e) => {\r\n        this.setState({[e.target.name]:e.target.value})\r\n    }\r\n    submitHandler = e => {\r\n        e.preventDefault()\r\n        console.log(this.state)\r\n        axios.post('https://wordfind.azurewebsites.net/api/English?code=8IZqWCIZi3kVDCXhQnmyvh0EKHvaQsVWN5kJjLnqR4ss4og5HzTL3Q==', this.state)\r\n        .then(response => {\r\n            console.log(response)\r\n            this.setState({List: response.data})\r\n        })\r\n        .then(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n    render() { \r\n     const {StartsWith, EndsWith, Include, WORDMAXLENGTH, WORDMINLENGTH,\r\n    List}= this.state\r\n        return ( \r\n            <div>\r\n                <Nav List={List} />\r\n                        <form onSubmit={this.submitHandler}>\r\n                        <input type=\"text\" name=\"StartsWith\" \r\n                        placeholder=\"startsWith\"\r\n                        onChange={this.onsumitForm} value={StartsWith}/><br/>\r\n                         <input type=\"text\" name=\"Include\"\r\n                        placeholder=\"include\"\r\n                        onChange={this.onsumitForm} value={Include}/><br/>\r\n                        <input type=\"text\" name=\"EndsWith\" \r\n                        placeholder=\"EndsWith\"\r\n                        onChange={this.onsumitForm} value={EndsWith}/><br/>\r\n                        <input type=\"number\" name=\"WORDMAXLENGTH\"  \r\n                        onChange={this.onsumitForm} value={WORDMAXLENGTH}\r\n                        min=\"2\" max=\"17\"/><br/>\r\n                        <input type=\"number\" name=\"WORDMINLENGTH\" \r\n                        onChange={this.onsumitForm} value={WORDMINLENGTH}\r\n                        min=\"1\" max=\"5\"/><br/>\r\n                        <button type=\"submit\">Submit</button>\r\n                </form>\r\n                <AppItems List={List} key={List.id}/>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default App1;","import React from 'react';\nimport PostForm from \"./Components/PostForm\"\n// import Main from \"./Main\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <PostForm/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}